// capture-pages.js
import puppeteer from "puppeteer";
import fs from "fs";

const pages = [
  "login",
  "student/dashboard",
  "student/profile", 
  "student/course/1",
  "student/learning/1",
  "student/notice"
];

const outputDir = "./screens";
if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

const run = async () => {
  console.log("üöÄ Starting page capture...");
  const browser = await puppeteer.launch({ 
    headless: false, // Î∏åÎùºÏö∞Ï†Ä Ï∞ΩÏùÑ Î≥¥Ïó¨Ï§å (ÎîîÎ≤ÑÍπÖÏö©)
    defaultViewport: { width: 1440, height: 1024 } // Îç∞Ïä§ÌÅ¨ÌÜ± ÌÅ¨Í∏∞
  });
  const page = await browser.newPage();
  
  for (const path of pages) {
    try {
      const url = `http://localhost:5173/${path}`;
      console.log(`üì∏ Capturing: ${url}`);
      
      await page.goto(url, { 
        waitUntil: "networkidle0",
        timeout: 30000 // 30Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
      });
      
      // ÌéòÏù¥ÏßÄÍ∞Ä ÏôÑÏ†ÑÌûà Î°úÎìúÎê† ÎïåÍπåÏßÄ Ïû†Ïãú ÎåÄÍ∏∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const fileName = path.replace(/\//g, "_") + ".png";
      await page.screenshot({ 
        path: `${outputDir}/${fileName}`, 
        fullPage: true,
        type: 'png'
      });
      
      console.log("‚úÖ Captured:", fileName);
    } catch (error) {
      console.error(`‚ùå Failed to capture ${path}:`, error.message);
    }
  }
  
  await browser.close();
  console.log("üéâ All pages captured successfully!");
};

run().catch(console.error);
